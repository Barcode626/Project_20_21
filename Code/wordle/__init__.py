{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"__init__.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNW0D5sNmZU/41g/tFwW928"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"jxLhTxiYC37x"},"source":["#!/usr/bin/env python\n","#\n","#  __init__.py\n","\"\"\"\n","Create wordclouds from git repositories, directories and source files.\n","\"\"\"\n","#\n","#  Copyright (c) 2020-2021 Dominic Davis-Foster <dominic@davis-foster.co.uk>\n","#\n","#  Permission is hereby granted, free of charge, to any person obtaining a copy\n","#  of this software and associated documentation files (the \"Software\"), to deal\n","#  in the Software without restriction, including without limitation the rights\n","#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n","#  copies of the Software, and to permit persons to whom the Software is\n","#  furnished to do so, subject to the following conditions:\n","#\n","#  The above copyright notice and this permission notice shall be included in all\n","#  copies or substantial portions of the Software.\n","#\n","#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n","#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n","#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n","#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n","#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n","#  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n","#  OR OTHER DEALINGS IN THE SOFTWARE.\n","#\n","#  Based on \"wordcloud\" by Andreas Christian Mueller and Paul Nechifor.\n","#  Copyright (c) 2012\n","#  MIT Licensed\n","#\n","\n","# stdlib\n","import os\n","import pathlib\n","import sys\n","import time\n","import typing\n","from typing import Callable, Optional, Sequence, Union\n","\n","# 3rd party\n","import numpy\n","from domdf_python_tools.typing import PathLike\n","from matplotlib.colors import Colormap  # type: ignore\n","from numpy.random.mtrand import RandomState\n","from wordcloud import WordCloud  # type: ignore\n","\n","# this package\n","from wordle.frequency import frequency_from_directory, frequency_from_file, get_tokens\n","from wordle.utils import _TemporaryDirectory, clone_into_tmpdir\n","\n","__author__: str = \"Dominic Davis-Foster\"\n","__copyright__: str = \"2020 Dominic Davis-Foster\"\n","__license__: str = \"MIT License\"\n","__version__: str = \"0.2.1\"\n","__email__: str = \"dominic@davis-foster.co.uk\"\n","\n","__all__ = [\"Wordle\", \"export_wordcloud\", \"get_tokens\"]\n","\n","\n","class Wordle(WordCloud):\n","\tr\"\"\"\n","\tGenerate word clouds from source code.\n","\t:param font_path: Font path to the font that will be used (OTF or TTF).\n","\t\tDefaults to DroidSansMono path on a Linux machine. If you are on\n","\t\tanother OS or don't have this font, you need to adjust this path.\n","\t:param width: The width of the canvas.\n","\t:param height: The height of the canvas.\n","\t:param prefer_horizontal: The ratio of times to try horizontal fitting as opposed to vertical.\n","\t\tIf prefer_horizontal < 1, the algorithm will try rotating the word\n","\t\tif it doesn't fit. (There is currently no built-in way to get only vertical words.)\n","\t:param mask: If not :py:obj:`None`, gives a binary mask on where to draw words. If mask is not\n","\t\t:py:obj:`None`, width and height will be ignored and the shape of mask will be\n","\t\tused instead. All white (``#FF`` or ``#FFFFFF``) entries will be considerd\n","\t\t\"masked out\" while other entries will be free to draw on.\n","\t:param contour_width: If mask is not :py:obj:`None` and contour_width > 0, draw the mask contour.\n","\t:param contour_color: Mask contour color.\n","\t:param scale: Scaling between computation and drawing. For large word-cloud images,\n","\t\tusing scale instead of larger canvas size is significantly faster, but\n","\t\tmight lead to a coarser fit for the words.\n","\t:param min_font_size: Smallest font size to use.\n","\t\tWill stop when there is no more room in this size.\n","\t:param font_step: Step size for the font.\n","\t\t``font_step`` > 1 might speed up computation but give a worse fit.\n","\t:param max_words: The maximum number of words.\n","\t:param background_color: Background color for the word cloud image.\n","\t:param max_font_size: Maximum font size for the largest word.\n","\t\tIf :py:obj:`None` the height of the image is used.\n","\t:param mode: Transparent background will be generated when mode is \"RGBA\" and\n","\t\tbackground_color is None.\n","\t:param relative_scaling: Importance of relative word frequencies for font-size.  With\n","\t\trelative_scaling=0, only word-ranks are considered.  With\n","\t\trelative_scaling=1, a word that is twice as frequent will have twice\n","\t\tthe size.  If you want to consider the word frequencies and not only\n","\t\ttheir rank, relative_scaling around .5 often looks good.\n","\t\tIf 'auto' it will be set to 0.5 unless repeat is true, in which\n","\t\tcase it will be set to 0.\n","\t:param color_func: Callable with parameters ``word``, ``font_size``, ``position``, ``orientation``,\n","\t\t``font_path``, ``random_state`` which returns a PIL color for each word.\n","\t\tOverwrites \"colormap\".\n","\t\tSee ``colormap`` for specifying a matplotlib colormap instead.\n","\t\tTo create a word cloud with a single color, use ``color_func=lambda *args, **kwargs: \"white\"``.\n","\t\tThe single color can also be specified using RGB code.\n","\t\tFor example ``color_func=lambda *args, **kwargs: (255,0,0)`` sets the color to red.\n","\t:param regexp: Regular expression to split the input text into tokens in process_text.\n","\t\tIf None is specified, ``r\"\\w[\\w']+\"`` is used. Ignored if using\n","\t\tgenerate_from_frequencies.\n","\t:param collocations: Whether to include collocations (bigrams) of two words. Ignored if using\n","\t\tgenerate_from_frequencies.\n","\t:param colormap: Matplotlib colormap to randomly draw colors from for each word.\n","\t\tIgnored if \"color_func\" is specified. Default \"viridis\".\n","\t:no-default colormap:\n","\t:param repeat: Whether to repeat words and phrases until max_words or min_font_size is reached.\n","\t:param include_numbers: Whether to include numbers as phrases or not.\n","\t:param min_word_length: Minimum number of letters a word must have to be included.\n","\t:param random_state: Seed for the randomness that determines the colour and position of words.\n","\t.. note::\n","\t\tLarger canvases with make the code significantly slower. If you need a\n","\t\tlarge word cloud, try a lower canvas size, and set the scale parameter.\n","\t\tThe algorithm might give more weight to the ranking of the words\n","\t\tthan their actual frequencies, depending on the ``max_font_size`` and the\n","\t\tscaling heuristic.\n","\t\"\"\"\n","\n","\tcolor_func: Callable\n","\t\"\"\"\n","\tCallable with parameters ``word``, ``font_size``, ``position``, ``orientation``,\n","\t``font_path``, ``random_state`` which returns a PIL color for each word.\n","\t\"\"\"\n","\n","\tdef to_html(self):  # noqa: D102\n","\t\traise NotImplementedError\n","\n","\tdef __init__(\n","\t\t\tself,\n","\t\t\tfont_path: Optional[str] = None,\n","\t\t\twidth: int = 400,  # 1920\n","\t\t\theight: int = 200,  # 1080\n","\t\t\tprefer_horizontal: float = 0.90,\n","\t\t\tmask: Optional[numpy.ndarray] = None,\n","\t\t\tcontour_width: float = 0,\n","\t\t\tcontour_color: str = \"black\",\n","\t\t\tscale: float = 1,\n","\t\t\tmin_font_size: int = 4,\n","\t\t\tfont_step: int = 1,\n","\t\t\tmax_words: int = 200,\n","\t\t\tbackground_color: str = \"black\",\n","\t\t\tmax_font_size: Optional[int] = None,\n","\t\t\tmode: str = \"RGB\",\n","\t\t\trelative_scaling: Union[str, float] = \"auto\",\n","\t\t\tcolor_func: Optional[Callable] = None,\n","\t\t\tregexp: Optional[str] = None,\n","\t\t\tcollocations: bool = True,\n","\t\t\tcolormap: Union[None, str, Colormap] = None,\n","\t\t\trepeat: bool = False,\n","\t\t\tinclude_numbers: bool = False,\n","\t\t\tmin_word_length: int = 0,\n","\t\t\t# margin=2,\n","\t\t\t# ranks_only=None,\n","\t\t\trandom_state: Union[RandomState, int, None] = None,\n","\t\t\t) -> None:\n","\n","\t\tsuper().__init__(\n","\t\t\t\tfont_path=font_path,\n","\t\t\t\twidth=width,\n","\t\t\t\theight=height,\n","\t\t\t\tprefer_horizontal=prefer_horizontal,\n","\t\t\t\tmask=mask,\n","\t\t\t\tcontour_width=contour_width,\n","\t\t\t\tcontour_color=contour_color,\n","\t\t\t\tscale=scale,\n","\t\t\t\tmin_font_size=min_font_size,\n","\t\t\t\tfont_step=font_step,\n","\t\t\t\tmax_words=max_words,\n","\t\t\t\tbackground_color=background_color,\n","\t\t\t\tmax_font_size=max_font_size,\n","\t\t\t\tmode=mode,\n","\t\t\t\trelative_scaling=relative_scaling,\n","\t\t\t\tcolor_func=color_func,\n","\t\t\t\tregexp=regexp,\n","\t\t\t\tcollocations=collocations,\n","\t\t\t\tcolormap=colormap,\n","\t\t\t\trepeat=repeat,\n","\t\t\t\tinclude_numbers=include_numbers,\n","\t\t\t\tmin_word_length=min_word_length,\n","\t\t\t\t# margin=margin,\n","\t\t\t\t# ranks_only=ranks_only,\n","\t\t\t\trandom_state=random_state,\n","\t\t\t\t)\n","\n","\tdef __array__(self) -> numpy.ndarray:  # pragma: no cover (typed wrapper)\n","\t\t\"\"\"\n","\t\tReturns the wordcloud image as numpy array.\n","\t\t\"\"\"\n","\n","\t\treturn super().__array__()\n","\n","\tdef generate_from_file(\n","\t\t\tself,\n","\t\t\tfilename: PathLike,\n","\t\t\toutfile: Optional[PathLike] = None,\n","\t\t\t*,\n","\t\t\texclude_words: Sequence[str] = (),\n","\t\t\tmax_font_size: Optional[int] = None\n","\t\t\t) -> \"Wordle\":\n","\t\t\"\"\"\n","\t\tCreate a word_cloud from a source code file.\n","\t\t:param filename: The file to process\n","\t\t:param outfile: The file to save the wordle as. Supported formats are ``PNG``, ``JPEG`` and ``SVG``.\n","\t\t\tIf :py:obj:`None` the wordle is not saved\n","\t\t:param exclude_words: An optional list of words to exclude\n","\t\t:param max_font_size: Use this font-size instead of :attr:`~Wordle.max_font_size`.\n","\t\t.. versionchanged:: 0.2.1  ``exclude_words``, ``max_font_size`` are now keyword-only.\n","\t\t\"\"\"\n","\n","\t\tword_counts = frequency_from_file(filename, exclude_words)\n","\n","\t\tself.generate_from_frequencies(word_counts, max_font_size=max_font_size)\n","\n","\t\tif outfile:\n","\t\t\texport_wordcloud(self, outfile)\n","\n","\t\treturn self\n","\n","\tdef generate_from_directory(\n","\t\t\tself,\n","\t\t\tdirectory: PathLike,\n","\t\t\toutfile: Optional[PathLike] = None,\n","\t\t\t*,\n","\t\t\texclude_words: Sequence[str] = (),\n","\t\t\texclude_dirs: Sequence[PathLike] = (),\n","\t\t\tmax_font_size: Optional[int] = None\n","\t\t\t) -> \"Wordle\":\n","\t\t\"\"\"\n","\t\tCreate a word_cloud from a directory of source code files.\n","\t\t:param directory: The directory to process\n","\t\t:param outfile: The file to save the wordle as. Supported formats are ``PNG``, ``JPEG`` and SVG.\n","\t\t\tIf :py:obj:`None` the wordle is not saved.\n","\t\t:param exclude_words: An optional list of words to exclude\n","\t\t:param exclude_dirs: An optional list of directories to exclude.\n","\t\t\tEach entry is treated as a regular expression to match at the beginning of the relative path.\n","\t\t:param max_font_size: Use this font-size instead of :attr:`~Wordle.max_font_size`.\n","\t\t.. versionchanged:: 0.2.1  ``exclude_words``, ``exclude_dirs``, ``max_font_size`` are now keyword-only.\n","\t\t\"\"\"\n","\n","\t\tword_counts: typing.Counter[str] = frequency_from_directory(\n","\t\t\t\tdirectory,\n","\t\t\t\texclude_words=exclude_words,\n","\t\t\t\texclude_dirs=exclude_dirs,\n","\t\t\t\t)\n","\n","\t\tself.generate_from_frequencies(word_counts, max_font_size=max_font_size)\n","\n","\t\tif outfile is not None:\n","\t\t\texport_wordcloud(self, outfile)\n","\n","\t\t# with open(\"wordcount.json\", \"w\") as fp:\n","\t\t# \tjson.dump(word_counts, fp)\n","\n","\t\treturn self\n","\n","\tdef generate_from_git(\n","\t\t\tself,\n","\t\t\tgit_url: str,\n","\t\t\toutfile: Optional[PathLike] = None,\n","\t\t\t*,\n","\t\t\tsha: Optional[str] = None,\n","\t\t\tdepth: Optional[int] = None,\n","\t\t\texclude_words: Sequence[str] = (),\n","\t\t\texclude_dirs: Sequence[PathLike] = (),\n","\t\t\tmax_font_size: Optional[int] = None\n","\t\t\t) -> \"Wordle\":\n","\t\t\"\"\"\n","\t\tCreate a word_cloud from a directory of source code files.\n","\t\t:param git_url: The url of the git repository to process\n","\t\t:param outfile: The file to save the wordle as. Supported formats are ``PNG``, ``JPEG`` and SVG.\n","\t\t\tIf :py:obj:`None` the wordle is not saved\n","\t\t:param sha: An optional SHA hash of a commit to checkout.\n","\t\t:param depth: An optional depth to clone at. If :py:obj:`None` and ``sha`` is :py:obj:`None` the depth is ``1``.\n","\t\t\tIf :py:obj:`None` and ``sha`` is given the depth is unlimited.\n","\t\t:param exclude_words: An optional list of words to exclude.\n","\t\t:param exclude_dirs: An optional list of directories to exclude.\n","\t\t:param max_font_size: Use this font-size instead of self.max_font_size.\n","\t\t.. versionchanged:: 0.2.1\n","\t\t\t* ``exclude_words``, ``exclude_dirs``, ``max_font_size`` are now keyword-only.\n","\t\t\t* Added the ``sha`` and ``depth`` keyword-only arguments.\n","\t\t\"\"\"\n","\n","\t\twith _TemporaryDirectory() as tmpdir:\n","\t\t\tclone_into_tmpdir(git_url, tmpdir, sha=sha, depth=depth)\n","\n","\t\t\tself.generate_from_directory(\n","\t\t\t\t\ttmpdir,\n","\t\t\t\t\toutfile=outfile,\n","\t\t\t\t\texclude_dirs=exclude_dirs,\n","\t\t\t\t\texclude_words=exclude_words,\n","\t\t\t\t\tmax_font_size=max_font_size,\n","\t\t\t\t\t)\n","\n","\t\t\tif sys.platform == \"win32\":\n","\t\t\t\ttime.sleep(5)  # pragma: no cover (!Windows)\n","\n","\t\treturn self\n","\n","\tdef recolor(  # pragma: no cover (typed wrapper)\n","\t\tself,\n","\t\trandom_state: Union[RandomState, int, None] = None,\n","\t\tcolor_func: Optional[Callable] = None,\n","\t\tcolormap: Union[None, str, Colormap] = None,\n","\t\t) -> \"Wordle\":\n","\t\t\"\"\"\n","\t\tRecolour the existing layout.\n","\t\tApplying a new coloring is much faster than regenerating the whole wordle.\n","\t\t:param random_state: If not :py:obj:`None`, a fixed random state is used.\n","\t\t\tIf an :class:`int` is given, this is used as seed for a :class:`random.Random` state.\n","\t\t:param color_func:  Function to generate new color from word count, font size, position and orientation.\n","\t\t\tIf :py:obj:`None`, :attr:`~Wordle.color_func` is used.\n","\t\t:param colormap: Use this colormap to generate new colors.\n","\t\t\tIgnored if ``color_func`` is specified. If :py:obj:`None`,\n","\t\t\t:attr:`~Wordle.color_func` or :attr:`~Wordle.color_map` is used.\n","\t\t:returns: self\n","\t\t\"\"\"\n","\n","\t\treturn super().recolor(random_state, color_func, colormap)\n","\n","\tdef to_array(self):  # pragma: no cover (typed wrapper)\n","\t\t\"\"\"\n","\t\tReturns the wordcloud image as numpy array.\n","\t\t\"\"\"\n","\n","\t\treturn super().to_array()\n","\n","\tdef to_file(self, filename: PathLike):\n","\t\t\"\"\"\n","\t\tExport the wordle to a file.\n","\t\t:param filename: The file to save as.\n","\t\t:returns: self\n","\t\t\"\"\"\n","\n","\t\treturn super().to_file(os.fspath(filename))\n","\n","\tdef to_image(self):\n","\t\t\"\"\"\n","\t\tReturns the wordcloud as an image.\n","\t\t\"\"\"\n","\n","\t\treturn super().to_image()\n","\n","\tdef to_svg(\n","\t\t\tself,\n","\t\t\t*,\n","\t\t\tembed_font: bool = False,\n","\t\t\toptimize_embedded_font: bool = True,\n","\t\t\tembed_image: bool = False,\n","\t\t\t) -> str:\n","\t\t\"\"\"\n","\t\tExport the wordle to an SVG.\n","\t\t:param embed_font: Whether to include font inside resulting SVG file.\n","\t\t:param optimize_embedded_font: Whether to be aggressive when embedding a font, to reduce size.\n","\t\t\tIn particular, hinting tables are dropped, which may introduce slight\n","\t\t\tchanges to character shapes (w.r.t. `to_image` baseline).\n","\t\t:param embed_image: Whether to include rasterized image inside resulting SVG file.\n","\t\t\tUseful for debugging.\n","\t\t:returns: The content of the SVG image.\n","\t\t\"\"\"\n","\n","\t\treturn super().to_svg(embed_font, optimize_embedded_font, embed_image)\n","\n","\n","def export_wordcloud(word_cloud: WordCloud, outfile: PathLike) -> None:\n","\t\"\"\"\n","\tExport a wordcloud to a file.\n","\t:param word_cloud:\n","\t:param outfile: The file to export the wordcloud to.\n","\t\"\"\"\n","\n","\toutfile = pathlib.Path(outfile)\n","\n","\tif outfile.suffix == \".svg\":\n","\t\toutfile.write_text(word_cloud.to_svg())\n","\telse:\n","\t\tword_cloud.to_file(str(outfile))"],"execution_count":null,"outputs":[]}]}