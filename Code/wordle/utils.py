{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"utils.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNUtMtUw5M0bhCXjovHQpID"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"dIBl8d51DP-h"},"source":["#!/usr/bin/env python\n","#\n","#  utils.py\n","\"\"\"\n","Utility functions.\n",".. versionadded:: 0.2.0\n","\"\"\"\n","#\n","#  Copyright (c) 2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>\n","#\n","#  Permission is hereby granted, free of charge, to any person obtaining a copy\n","#  of this software and associated documentation files (the \"Software\"), to deal\n","#  in the Software without restriction, including without limitation the rights\n","#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n","#  copies of the Software, and to permit persons to whom the Software is\n","#  furnished to do so, subject to the following conditions:\n","#\n","#  The above copyright notice and this permission notice shall be included in all\n","#  copies or substantial portions of the Software.\n","#\n","#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n","#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n","#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n","#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n","#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n","#  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n","#  OR OTHER DEALINGS IN THE SOFTWARE.\n","#\n","\n","# stdlib\n","import os\n","import pathlib\n","import sys\n","import tempfile\n","from contextlib import redirect_stderr, suppress\n","from typing import ContextManager, Optional\n","\n","# 3rd party\n","from domdf_python_tools.compat import nullcontext\n","from domdf_python_tools.typing import PathLike\n","from dulwich.config import StackedConfig\n","from southwark import clone, windows_clone_helper\n","\n","__all__ = [\"clone_into_tmpdir\"]\n","\n","\n","def clone_into_tmpdir(\n","\t\tgit_url: str,\n","\t\ttmpdir: PathLike,\n","\t\tsha: Optional[str] = None,\n","\t\tdepth: Optional[int] = None,\n","\t\t) -> pathlib.Path:\n","\t\"\"\"\n","\tClone the git repository at ``git_url`` into ``tmpdir``.\n","\t:param git_url: The url of the git repository to process\n","\t:param tmpdir:\n","\t:param sha: An optional SHA hash of a commit to checkout.\n","\t:param depth: An optional depth to clone at. If :py:obj:`None` and ``sha`` is :py:obj:`None` the depth is ``1``.\n","\t\tIf :py:obj:`None` and ``sha`` is given the depth is unlimited.\n","\t.. versionadded:: 0.2.0\n","\t\"\"\"\n","\n","\tif sha is None and depth is None:\n","\t\tdepth = 1\n","\n","\tdirectory = pathlib.Path(tmpdir)\n","\n","\t_environ = dict(os.environ)  # or os.environ.copy()\n","\t_default_backends = StackedConfig.default_backends\n","\n","\twith windows_clone_helper():\n","\t\twith open(os.devnull, encoding=\"UTF-8\") as devnull:\n","\t\t\twith redirect_stderr(devnull):\n","\t\t\t\trepo = clone(git_url, target=str(directory), depth=depth)\n","\n","\t\tif sha is not None:\n","\t\t\trepo.reset_to(sha)\n","\n","\treturn directory\n","\n","\n","class _TemporaryDirectory(tempfile.TemporaryDirectory):\n","\n","\tdef cleanup(self):\n","\t\tcontext: ContextManager\n","\n","\t\tif sys.platform == \"win32\":\n","\t\t\tcontext = suppress(PermissionError, NotADirectoryError)\n","\t\telse:\n","\t\t\tcontext = nullcontext()\n","\n","\t\twith context:\n","\t\t\tsuper().cleanup()"],"execution_count":null,"outputs":[]}]}